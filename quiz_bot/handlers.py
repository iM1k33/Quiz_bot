from aiogram import F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from .dbfunctions import  update_quiz_index, get_quiz_index, get_user_score, update_user_score, save_quiz_result
from .questions import quiz_data

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç–∏–ø–∞ Reply
    builder = ReplyKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–±–æ—Ä—â–∏–∫ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"))
    # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup(resize_keyboard=True))

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /quiz
async def cmd_quiz(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∏–∑
    await new_quiz(message)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞
async def new_quiz(message):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = message.from_user.id
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞ –≤ 0
    current_question_index = 0
    await update_quiz_index(user_id, current_question_index)
    #–°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await update_user_score(user_id, 0)
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–≤–∏–∑–∞
    await get_question(message, user_id)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞
async def get_question(message, user_id):
    current_question_index = await get_quiz_index(user_id)
    current_question = quiz_data[current_question_index]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∏–Ω–¥–µ–∫—Å–æ–≤
    kb = generate_options_keyboard(current_question['options'])
    await message.answer(
        f"‚ùî –í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(quiz_data)}:\n"
        f"{current_question['question']}",
        reply_markup=kb)

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
def generate_options_keyboard(answer_options):
    builder = InlineKeyboardBuilder()

    for index, option in enumerate(answer_options):
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"answer_{index}"))  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
    builder.adjust(1)
    return builder.as_markup()

async def answer_handler(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    selected_index = int(callback.data.replace("answer_", ""))
    user_id = callback.from_user.id
    current_question_index = await get_quiz_index(user_id)
    current_question = quiz_data[current_question_index]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    selected_option_text = current_question['options'][selected_index]
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    correct_option_index = current_question['correct_option']
    correct_option_text = current_question['options'][correct_option_index]
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if selected_index == correct_option_index:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await callback.message.answer(
            f"‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            f"–í–∞—à –≤—ã–±–æ—Ä: {selected_option_text}")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        current_score = await get_user_score(user_id)
        await update_user_score(user_id, current_score + 1)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await callback.message.answer(
            f"‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option_text}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option_text}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)
    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
        total_score = await get_user_score(user_id)
        await save_quiz_result(user_id, total_score)
        #await update_user_score(user_id, 0)
        await callback.message.answer(
            f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{len(quiz_data)}\n"
            f"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats")