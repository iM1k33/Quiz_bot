import aiosqlite
from aiogram import types
from questions import quiz_data
DB_NAME = 'db/quiz_bot.db'

async def create_table():
    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
    async with aiosqlite.connect(DB_NAME) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await db.execute('''CREATE TABLE IF NOT EXISTS quiz_state (user_id INTEGER PRIMARY KEY, question_index INTEGER)''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞
        await db.execute('''CREATE TABLE IF NOT EXISTS user_scores (user_id INTEGER PRIMARY KEY, score INTEGER)''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await db.execute('''CREATE TABLE IF NOT EXISTS quiz_results (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, score INTEGER, total_questions INTEGER, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.commit()

async def update_quiz_index(user_id, index):
    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
    async with aiosqlite.connect(DB_NAME) as db:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –µ–µ, –µ—Å–ª–∏ —Å –¥–∞–Ω–Ω—ã–º user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute('INSERT OR REPLACE INTO quiz_state (user_id, question_index) VALUES (?, ?)', (user_id, index))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.commit()

async def get_quiz_index(user_id):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute('SELECT question_index FROM quiz_state WHERE user_id = (?)', (user_id, )) as cursor:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results = await cursor.fetchone()
            if results is not None:
                return results[0]
            else:
                return 0

async def get_user_score(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute('SELECT score FROM user_scores WHERE user_id = ?', (user_id,)) as cursor:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results = await cursor.fetchone()
            if results is not None:
                return results[0]
            else:
                return 0

async def update_user_score(user_id, score):
    async with aiosqlite.connect(DB_NAME) as db:
        #–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            'INSERT OR REPLACE INTO user_scores (user_id, score) VALUES (?, ?)', (user_id, score))
        await db.commit()

async def save_quiz_result(user_id, score):
    async with aiosqlite.connect(DB_NAME) as db:
        #–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            'INSERT INTO quiz_results (user_id, score, total_questions) VALUES (?, ?, ?)', (user_id, score, len(quiz_data)))
        await db.commit()

async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(
            'SELECT score, total_questions, timestamp FROM quiz_results '
            'WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1',
            (user_id,)) as cursor:
            result = await cursor.fetchone()
    if result:
        score, total_questions, timestamp = result
        await message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total_questions}\n"
            f"–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {timestamp}")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /quiz")